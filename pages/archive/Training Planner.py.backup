import streamlit as st
import pandas as pd
import duckdb
from datetime import datetime, timedelta
import calendar

from db_config import get_database_connection
st.set_page_config(page_title="SPK Dashboard", layout="wide")

st.subheader("📅 Trainingskalender")
        
# Database connectie voor trainingen
con = get_database_connection()

# Maak trainings tabel aan
con.execute("""
    CREATE TABLE IF NOT EXISTS trainings_calendar (
        training_id INTEGER PRIMARY KEY,
        datum DATE,
        type TEXT,
        omschrijving TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
""")

# Maak sequence voor training_id
try:
    con.execute("CREATE SEQUENCE IF NOT EXISTS training_id_seq START 1")
except:
    pass

# Sidebar voor maand/jaar selectie
current_date = datetime.now()
col_year, col_month = st.sidebar.columns(2)

with col_year:
    year = st.selectbox("Jaar", 
                       options=list(range(current_date.year - 1, current_date.year + 2)),
                       index=1,
                       key="year_select")

with col_month:
    month = st.selectbox("Maand",
                        options=list(range(1, 13)),
                        format_func=lambda x: calendar.month_name[x],
                        index=current_date.month - 1,
                        key="month_select")

# Snelle toevoeg sectie in sidebar
st.sidebar.markdown("### ➕ Snelle Toevoeg")
with st.sidebar.form("nieuwe_training"):
    training_datum = st.date_input("📅 Datum", value=datetime.today().date())
    training_type = st.selectbox("🏃 Type", ["Training", "Wedstrijd", "Vriendschappelijk", "Test"])
    training_omschrijving = st.text_input("📝 Omschrijving", placeholder="Korte beschrijving")
    
    submitted = st.form_submit_button("✅ Toevoegen")
    
    if submitted:
        con.execute("""
            INSERT INTO trainings_calendar (training_id, datum, type, omschrijving)
            VALUES (nextval('training_id_seq'), ?, ?, ?)
        """, (training_datum, training_type, training_omschrijving))
        
        st.success(f"✅ {training_type} toegevoegd!")
        st.rerun()

# Haal trainingen op voor geselecteerde maand
first_day = datetime(year, month, 1).date()
if month == 12:
    last_day = datetime(year + 1, 1, 1).date() - timedelta(days=1)
else:
    last_day = datetime(year, month + 1, 1).date() - timedelta(days=1)

trainings = con.execute("""
    SELECT training_id, datum, type, omschrijving 
    FROM trainings_calendar 
    WHERE datum >= ? AND datum <= ?
    ORDER BY datum
""", (first_day, last_day)).fetchall()

# Maak dictionary voor snelle lookup
trainings_dict = {}
for training in trainings:
    training_id, datum, type_tr, omschrijving = training
    datum_obj = pd.to_datetime(datum).date()
    if datum_obj not in trainings_dict:
        trainings_dict[datum_obj] = []
    trainings_dict[datum_obj].append({
        'id': training_id,
        'type': type_tr, 
        'omschrijving': omschrijving
    })

# Genereer kalender
cal = calendar.monthcalendar(year, month)
month_name = calendar.month_name[month]

st.markdown(f"### {month_name} {year}")

# Dagnames header
col_headers = st.columns(7)
day_names = ['Ma', 'Di', 'Wo', 'Do', 'Vr', 'Za', 'Zo']
for i, day_name in enumerate(day_names):
    col_headers[i].markdown(f"**{day_name}**")

# Kalender rijen
for week in cal:
    cols = st.columns(7)
    for i, day in enumerate(week):
        with cols[i]:
            if day == 0:
                st.markdown("<div style='height: 100px;'></div>", unsafe_allow_html=True)
            else:
                current_date_obj = datetime(year, month, day).date()
                today = datetime.today().date()
                
                # Dag nummer
                if current_date_obj == today:
                    st.markdown(f"**🟡 {day}**")
                elif current_date_obj < today:
                    st.markdown(f"<span style='color: gray'>{day}</span>", unsafe_allow_html=True)
                else:
                    st.markdown(f"**{day}**")
                
                # Trainingen voor deze dag
                if current_date_obj in trainings_dict:
                    for training in trainings_dict[current_date_obj]:
                        # Type emoji
                        emoji = "🏃" if training['type'] == "Training" else "⚽" if training['type'] == "Wedstrijd" else "🤝" if training['type'] == "Vriendschappelijk" else "📊"
                        
                        # Korte weergave
                        short_desc = training['omschrijving'][:15] + "..." if training['omschrijving'] and len(training['omschrijving']) > 15 else training['omschrijving'] or ""
                        
                        with st.container():
                            st.markdown(f"<div style='background-color: #f0f0f0; padding: 2px; margin: 1px; border-radius: 3px; font-size: 10px;'>{emoji} {training['type']}<br>{short_desc}</div>", 
                                      unsafe_allow_html=True)
                            
                            # Verwijder knop
                            if st.button("🗑️", key=f"del_{training['id']}", help="Verwijderen"):
                                con.execute("DELETE FROM trainings_calendar WHERE training_id = ?", (training['id'],))
                                st.rerun()

# Legenda
st.markdown("---")
col_leg1, col_leg2, col_leg3, col_leg4 = st.columns(4)
with col_leg1:
    st.markdown("🏃 **Training**")
with col_leg2:
    st.markdown("⚽ **Wedstrijd**")
with col_leg3:
    st.markdown("🤝 **Vriendschappelijk**")
with col_leg4:
    st.markdown("📊 **Test**")

# Komende trainingen lijst
st.markdown("---")
st.markdown("### 📅 Komende Trainingen")

upcoming_trainings = con.execute("""
    SELECT training_id, datum, type, omschrijving 
    FROM trainings_calendar 
    WHERE datum >= ?
    ORDER BY datum
    LIMIT 5
""", (datetime.today().date(),)).fetchall()

if upcoming_trainings:
    for training in upcoming_trainings:
        training_id, datum, type_tr, omschrijving = training
        datum_obj = pd.to_datetime(datum).date()
        datum_str = datum_obj.strftime("%d/%m/%Y")
        
        # Type emoji
        emoji = "🏃" if type_tr == "Training" else "⚽" if type_tr == "Wedstrijd" else "🤝" if type_tr == "Vriendschappelijk" else "📊"
        
        col1, col2 = st.columns([3, 1])
        with col1:
            st.markdown(f"{emoji} **{type_tr}** - {datum_str}")
            if omschrijving:
                st.markdown(f"*{omschrijving}*")
        with col2:
            if st.button("🔗 Planning", key=f"plan_{training_id}", help="Gebruik voor Training Planning"):
                st.info("🔄 Ga naar 'Training Planning' voor verdere configuratie")
else:
    st.info("📭 Geen komende trainingen gepland")

con.close()